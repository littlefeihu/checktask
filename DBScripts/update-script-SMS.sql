/*
Deployment script for LN_DL_SubMgmt_P2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LN_DL_SubMgmt_P2"
:setvar DefaultFilePrefix "LN_DL_SubMgmt_P2"
--:setvar DefaultDataPath "c:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
--:setvar DefaultLogPath "c:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping UQ__tblAnnot__1B2A015C4CF0575A...';
PRINT N'In case the constraint does not exist - please retrieve the correct name from the database';


GO
ALTER TABLE [dbo].[tblAnnotations] DROP CONSTRAINT [UQ__tblAnnot__1B2A015C4CF0575A];


GO
PRINT N'Creating UQ_tblAnnotations_SyncId_AnnotationCode...';


GO
ALTER TABLE [dbo].[tblAnnotations]
    ADD CONSTRAINT [UQ_tblAnnotations_SyncId_AnnotationCode] UNIQUE NONCLUSTERED ([SyncID] ASC, [AnnotationCode] ASC);


GO
PRINT N'Creating [dbo].[GetAnnotationContent]...';


GO
CREATE FUNCTION [dbo].[GetAnnotationContent]
(
	@AnnotationContent XML
)
RETURNS NVARCHAR(255)
AS
BEGIN
	DECLARE @UpdateOn NVARCHAR(25)

	SELECT @UpdateOn = T.R.value('note[1]', 'nvarchar(255)')
	FROM @AnnotationContent.nodes('/annotation') as T(R)

	RETURN @UpdateOn
END
GO
PRINT N'Altering [dbo].[vwUserEntitlements]...';


GO
-- ============================================================
-- Author:		Shahid Ali
-- Create date: 20/06/2013 
-- Description:
-- This view returns User's Entitlements Status.
-- If a DL is not returned by the view, that DL can't be assigned to the user.
-- The reason for ineligibility for assigning DL is also returned.
-- ============================================================
ALTER VIEW [dbo].[vwUserEntitlements]
AS
WITH CTE_LatestEntitlements AS -- Filter out the old entitlements and consider only Entitlements which are either active or whose cooling off period is not expired yet.
(
	SELECT EntitlementId
		, DLID
		, UserID
		, AccountID
		, IsActive
		, LastUpdatedDate
		, ValidFrom
		, ValidTo
		, IsLoan
		, IsInCoolOffPeriod
		, IsTrial
		, CreatedDate
	FROM fnGetUserEntitlements() -- This function is required to improve performance by removing the need for recursive full table scan for tblEntitlements
),
CTE_LatestEntitlementsWithCoolOff AS -- Filter out the old entitlements and consider only Entitlements which are either active or whose cooling off period is not expired yet.
(
	SELECT 
		EntitlementId
		, DLID
		, UserID
		, AccountID
		, IsActive
		, LastUpdatedDate
		, ValidFrom
		, ValidTo
		, IsLoan
		, IsInCoolOffPeriod
		, CreatedDate
	FROM CTE_LatestEntitlements
	WHERE IsTrial = 0
),
CTE_UserActiveLoans as
(
	SELECT UserID, COUNT(*) AS UserActiveLoans FROM CTE_LatestEntitlementsWithCoolOff WHERE IsActive = 1 AND IsLoan=1 group by UserId
),
CTE_AccountActiveEntitlements AS
(
	SELECT AccountId, DlID, IsLoan, Count(*) Cont FROM CTE_LatestEntitlementsWithCoolOff WHERE IsActive = 1 group by AccountId, DlID, IsLoan
),
CTE_User AS	-- Get UserID, AccountID, CurrentEntitlements, MaxLoanEntitlements for all active users
(
	SELECT 
		U.AccountID
		, AC.BillingAccountNum
		, U.UserID
		, U.FirstName
		, U.LastName
		, U.EmailAddress 
		, UserMaxLoans = AC.DefaultBorrowingLimit
		, UserActiveLoans = ISNULL(UL.UserActiveLoans, 0)
	FROM dbo.tblUser U 
		INNER JOIN tblAccount AC ON AC.AccountID = U.AccountID
		LEFT JOIN CTE_UserActiveLoans UL ON U.UserId = UL.UserID
	WHERE U.IsActive = 1
), 
CTE_ActiveDLs AS
(
	SELECT 
		DLID
		, DLTitle
		, tblProducts.ProductId 
	FROM tblDL INNER JOIN tblProducts ON tblDL.ProductId = tblProducts.ProductId 
	WHERE tblProducts.IsActive = 1 AND tblDL.IsActive = 1
),
CTE_ActiveProductRequests AS
(
	SELECT RQ.UserID
		, RQ.ProductID
		, RequestedDate = Max(RQ.CreatedDate)
		, LatestEntitlementDate = MAX(E.CreatedDate)
	-- TODO: Change the tblUserProductRequests to remove the IsLoan field as a request can only be made for a loan.
	FROM tblUserProductRequests RQ 
		INNER JOIN CTE_ActiveDLs DL ON RQ.ProductID = DL.ProductId
		LEFT JOIN tblEntitlements E ON E.DLID = Dl.DLID AND E.UserId = RQ.UserId AND E.IsLoan=1
	GROUP BY RQ.UserID, RQ.ProductID
	HAVING MAX(E.CreatedDate) IS NULL OR Max(RQ.CreatedDate) > MAX(E.CreatedDate)
),
CTE_LatestTrials AS
(
	SELECT 
		EntitlementId
		, DLID
		, UserID
		, AccountID
		, IsActive
		, LastUpdatedDate
		, ValidFrom
		, ValidTo
		, IsLoan
	FROM CTE_LatestEntitlements
	WHERE IsTrial = 1
),
-- Follofing 3 CTEs (replacing inner queries) are very important for performance enhancement.
CTE_UserDLLoanStatus AS 
(
	SELECT UserID, DLID, IsLoan, AvailableDate=MAX(ValidTo) FROM CTE_LatestEntitlementsWithCoolOff WHERE IsActive=1 GROUP BY UserID, DLID, IsLoan 
),
CTE_UserDLCoolOffStatus AS -- Select only those records where the DL is in cooloff period
(
	SELECT UserID, DLID, IsInCoolOffPeriod FROM CTE_LatestEntitlementsWithCoolOff WHERE IsInCoolOffPeriod=1 GROUP BY UserID, DLID, IsInCoolOffPeriod 
),
CTE_UserDLTrialStatus AS -- A Trial can only be subscription. It cannot be loan
(
	SELECT UserID, DLID, IsLoan FROM CTE_LatestTrials WHERE IsActive = 1 AND IsLoan=0 GROUP BY UserID, DLID, IsLoan 
),
CTE_Final AS
(
	SELECT 
		U.AccountID
		, U.BillingAccountNum
		, U.UserID
		, Dl.DLID
		, Dl.DLTitle
		, SM.IsLoan
		, IsRequested = CAST((CASE WHEN APR.RequestedDate IS NOT NULL THEN 1 ELSE 0 END) AS BIT) 
		, RequestedDate = APR.RequestedDate
		, LoanedOrSubscribed = UDS.IsLoan
		, AlternateLoanedOrSubscribed = AlternateUDS.IsLoan
		, TrialLoanedOrTrialSubscribed = UDT.IsLoan
		, AlternateTrialLoanedOrAlternateTrialSubscribed = UADT.IsLoan
		, IsInCoolOffPeriod = ISNULL(UDC.IsInCoolOffPeriod, 0)
		, UserActiveLoans = U.UserActiveLoans -- Denotes the no. of all the DLs loaned by this user.
		, UserMaxLoans = U.UserMaxLoans
		, AccountMaxEntitlements = SM.NumberOfEntitlements
		, AccountActiveEntitlements = ISNULL(AAE.Cont,0)
		, Dl.ProductId
		, U.FirstName
		, U.LastName
		, U.EmailAddress
	FROM CTE_User U
		INNER JOIN [dbo].[tblSubscriptionsMapping] SM ON U.AccountID = SM.AccountID AND SM.IsActive = 1
		INNER JOIN CTE_ActiveDLs Dl ON SM.ProductId = Dl.ProductId
		LEFT JOIN CTE_AccountActiveEntitlements AAE ON AAE.AccountID = U.AccountID AND AAE.DLID=Dl.DLID AND AAE.IsLoan=SM.IsLoan
		LEFT JOIN CTE_UserDLLoanStatus UDS ON UDS.UserID = U.UserID AND UDS.DLID = Dl.DLID
		LEFT JOIN CTE_UserDLLoanStatus AlternateUDS ON AlternateUDS.UserID = U.UserID AND AlternateUDS.DLID = [LN_DL_Packaging_P2].dbo.fnGetAlternateDlId(Dl.DLID)
		LEFT JOIN CTE_UserDLCoolOffStatus UDC ON UDC.UserID = U.UserID AND UDC.DLID = Dl.DLID
		LEFT JOIN CTE_UserDLTrialStatus UDT ON UDT.UserID = U.UserID AND UDT.DLID = Dl.DLID
		LEFT JOIN CTE_UserDLTrialStatus UADT ON UADT.UserID = U.UserID AND UADT.DLID = [LN_DL_Packaging_P2].dbo.fnGetAlternateDlId(Dl.DLID)
		LEFT JOIN CTE_ActiveProductRequests APR ON APR.ProductId = Dl.ProductId AND APR.UserID = U.UserID
)
SELECT 	
	C.AccountID
	, BillingAccountNum
	, UserID
	, FirstName
	, LastName
	, EmailAddress
	, C.DLID
	, DLTitle
	, C.IsLoan
	, IsLoaned	 = CAST((CASE WHEN LoanedOrSubscribed = 1 THEN 1 ELSE 0 END) AS BIT) 
	, IsSubscribed = CAST((CASE WHEN LoanedOrSubscribed = 0 THEN 1 ELSE 0 END) AS BIT) 
	, IsAlternateSubscribed = CAST((CASE WHEN AlternateLoanedOrSubscribed = 0 THEN 1 ELSE 0 END) AS BIT) 
	, IsTrialSubscribed = CAST((CASE WHEN TrialLoanedOrTrialSubscribed = 0 THEN 1 ELSE 0 END) AS BIT) 
	, IsAlternateTrialSubscribed = CAST((CASE WHEN AlternateTrialLoanedOrAlternateTrialSubscribed = 0 THEN 1 ELSE 0 END) AS BIT) 
	, IsRequested
	, CanLoan = 
		CAST((CASE WHEN 
			LoanedOrSubscribed IS NULL -- There should not exist a loan or subscription against this DLid and UserID
			AND TrialLoanedOrTrialSubscribed IS NULL -- There should not exist a trial subscription against this DLid and UserID
			AND AlternateTrialLoanedOrAlternateTrialSubscribed IS NULL
			AND UserActiveLoans < UserMaxLoans -- No. of current loans should not exceed default loans limit for this user
			AND AccountActiveEntitlements < AccountMaxEntitlements -- Billing account cannot utilize entitlements more than its allowed limit for this DLid.
		 THEN 1 
		 ELSE 0 END) AS BIT)
		-- No. of current loans should not exceed allowed loans for this user's account and this DL
	, CanSubscribe =
		CAST((CASE WHEN 
			LoanedOrSubscribed IS NULL -- There should not exist a loan or subscription against this DLid and UserID
			AND TrialLoanedOrTrialSubscribed IS NULL -- There should not exist a trial subscription against this DLid and UserID
			AND AlternateTrialLoanedOrAlternateTrialSubscribed IS NULL
			AND (IsInCoolOffPeriod IS NULL OR IsInCoolOffPeriod = 0)-- Must not be in Cool off period
			AND AccountActiveEntitlements < AccountMaxEntitlements -- Billing account cannot utilize entitlements more than its allowed limit for this DLid.
			AND AlternateLoanedOrSubscribed IS NULL
		 THEN 1 
		 ELSE 0 END) AS BIT)
	, CanSuperUserSubscribe =
		CAST((CASE WHEN 
			LoanedOrSubscribed IS NULL -- There should not exist a loan or subscription against this DLid and UserID
			AND TrialLoanedOrTrialSubscribed IS NULL -- There should not exist a trial subscription against this DLid and UserID
			AND AccountActiveEntitlements < AccountMaxEntitlements -- Billing account cannot utilize entitlements more than its allowed limit for this DLid.
		 THEN 1 
		 ELSE 0 END) AS BIT)
	, CanSuperUserLoan =
		CAST((CASE WHEN 
			LoanedOrSubscribed IS NULL -- There should not exist a loan or subscription against this DLid and UserID
			AND TrialLoanedOrTrialSubscribed IS NULL -- There should not exist a trial subscription against this DLid and UserID
		 THEN 1 
		 ELSE 0 END) AS BIT)
	, UserActiveLoans
	, UserMaxLoans
	, AccountActiveEntitlements
	, AccountMaxEntitlements
	, ProductId
	, RequestedDate 
	, AvailableDate =
		CASE 
			WHEN LoanedOrSubscribed IN (1, 0) THEN (SELECT AvailableDate FROM CTE_UserDLLoanStatus ECO WHERE ECO.UserID = C.UserID AND ECO.DLID = C.DLID) -- 'Title already loaned or Subscribed. ' 
			WHEN TrialLoanedOrTrialSubscribed IN (1, 0) THEN (SELECT MAX(ValidTo) FROM CTE_LatestTrials TCO WHERE TCO.UserID = C.UserID AND TCO.DLID = C.DLID AND IsActive = 1) -- 'Title already trial loaned or subscribed. ' 
			WHEN AlternateTrialLoanedOrAlternateTrialSubscribed IN (1, 0) THEN (SELECT MAX(ValidTo) FROM CTE_LatestTrials TCO WHERE TCO.UserID = C.UserID AND TCO.DLID = [LN_DL_Packaging_P2].dbo.fnGetAlternateDlId(C.DLID) AND IsActive = 1) -- 'Title already trial loaned or subscribed. ' 
			ELSE
				CASE
					WHEN C.IsLoan = 1 THEN -- Loan
						(CASE
							WHEN AccountActiveEntitlements >= AccountMaxEntitlements OR UserActiveLoans >= UserMaxLoans THEN (SELECT MIN(ValidTo) FROM CTE_LatestEntitlementsWithCoolOff ER WHERE IsActive = 1 AND IsLoan=1 AND ER.DLID = C.DLID AND ER.AccountID = C.AccountID) 
							ELSE GETDATE()
							END)
					WHEN C.IsLoan = 0 THEN -- Subscription
						(CASE 
							WHEN IsInCoolOffPeriod = 1 THEN (SELECT MAX(LastUpdatedDate) FROM CTE_LatestEntitlementsWithCoolOff ER WHERE IsActive = 1 AND IsLoan=0 AND ER.DLID = C.DLID AND ER.AccountID = C.AccountID) 
							WHEN AccountActiveEntitlements >= AccountMaxEntitlements OR UserActiveLoans >= UserMaxLoans THEN (SELECT MAX(ValidTo) FROM CTE_LatestEntitlementsWithCoolOff ECO WHERE IsActive = 1 AND IsLoan=0 AND ECO.DLID = C.DLID AND ECO.AccountID = C.AccountID)
							ELSE GETDATE()
							END)
					END
			END
	, Comments =
		CASE WHEN C.IsLoan = 1 THEN -- Loan
			(CASE WHEN UserActiveLoans >= UserMaxLoans THEN 'Maximum loan limit reached for this user. ' ELSE '' END)
		WHEN C.IsLoan = 0 THEN -- Subscription
			(CASE WHEN IsInCoolOffPeriod = 1 THEN 'Cooling off period not yet elapsed. ' ELSE '' END)
		ELSE '' END
		+
		(CASE WHEN LoanedOrSubscribed = 1 THEN 'Title already loaned. ' WHEN LoanedOrSubscribed = 0 THEN 'Title already subscribed. ' ELSE '' END)
		+
		(CASE WHEN AlternateLoanedOrSubscribed = 0 THEN 'Alternate title already subscribed. ' ELSE '' END)
		+
		(CASE WHEN AlternateTrialLoanedOrAlternateTrialSubscribed = 0 THEN 'Alternate title has an active trial. ' ELSE '' END)
		+
		(CASE WHEN TrialLoanedOrTrialSubscribed = 1 THEN 'Title already trial loaned. ' WHEN TrialLoanedOrTrialSubscribed = 0 THEN 'Title has an active trial. ' ELSE '' END)
		+
		CASE WHEN AccountActiveEntitlements >= AccountMaxEntitlements THEN 'Maximum capacity reached for this title. ' ELSE '' END
FROM CTE_Final C
GO
PRINT N'Altering [dbo].[uspDeleteAccount]...';


GO
-- ============================================================  
-- Author:  Cognizant Tech Solutions  
-- Create date: 9/23/2011   
-- Description: To update the isActive column of the Billing Account Table  
-- Modified By: Shahed Kazi
-- Modified On: 10 Oct 2013
-- Modified For: Bug Fixing - keep loans and trials from deleting - entitlement & device
-- Updated Last Updated By to include scripts modifying it
-- ============================================================  
ALTER PROCEDURE [dbo].[uspDeleteAccount]  
@ModifiedDateTime DATETIME 
AS 
BEGIN        
      BEGIN TRY
            BEGIN TRANSACTION TransDeleteAccount
            
            DECLARE @DlStatusDER INT
            
            SELECT @DlStatusDER=[Id] FROM [dbo].[tblDLStatus] WHERE [Description]='Removed by eReader'
            
                  INSERT INTO [dbo].[tblDLToDeviceMappingHst]
                        ([DLDeviceMappingId]
                        ,[DeviceId]
                        ,[DLID]
                        ,[UserID]
                        ,[DLVersion]
                        ,[DLStatus]
                        ,[LastUpdatedDate]
                        ,[LastUpdatedBy]
                        ,[CreatedDate]
                        ,[CreatedBy])
                  SELECT [DLDeviceMappingId]
                           ,[DeviceId]
                           ,[DLID]
                           ,[UserID]
                           ,[DLVersion]
                           ,[DLStatus]
                           ,[LastUpdatedDate]
                           ,[LastUpdatedBy]
                           ,[CreatedDate]
                           ,[CreatedBy]
                  FROM [dbo].[tblDLToDeviceMapping]
				  -- SK check for users in tblEntitlement and check if it's a trial account or not
                  WHERE [UserID] IN
                              (SELECT DISTINCT [tblUser].[UserID] 
                               FROM [dbo].[tblUser]
							   join tblEntitlements
							   ON [tblUser].[UserID] = [tblEntitlements].[UserID]
                              WHERE [tblUser].[AccountID] IN
                                    (SELECT DISTINCT AccountID 
                                      FROM [dbo].[tblSubscriptionsMapping] 
                                      WHERE [LastUpdatedDate] < @ModifiedDateTime)
									  and [tblEntitlements].[IsActive] = 1
									  and [tblEntitlements].[Trial] = 0
                        AND [DLID] IN
                                    (SELECT DISTINCT dl.DLID 
                                     FROM [dbo].[tblSubscriptionsMapping] sm 
                                                INNER JOIN 
                                          [dbo].[tblDL] dl 
                                                ON sm.ProductId=dl.ProductId
                                    WHERE sm.[LastUpdatedDate] < @ModifiedDateTime))
                  
                  
      CREATE TABLE #tempDltoDev
                  (
                        ROWID INT IDENTITY(1,1),
                        DLID INT,
                        AcctID INT,
                        Isloan bit --LNRED-1424
                  );

                  INSERT INTO #tempDltoDev
                  SELECT DISTINCT dl.DLID,sm.AccountID, sm.IsLoan FROM [dbo].[tblSubscriptionsMapping] sm  --LNRED-1424
                  INNER JOIN [dbo].[tblDL] dl ON sm.ProductId=dl.ProductId WHERE sm.[LastUpdatedDate] < @ModifiedDateTime
                                                
                  DECLARE @tempRowCount AS INT
                  DECLARE @CurrentRow AS INT = 1
                  DECLARE @AccounttId AS INT
                  DECLARE @DlactiveId AS INT
                  DECLARE @IsLoanDL as bit --LNRED-1424

                  SELECT @tempRowCount = COUNT(ROWID) FROM #tempDltoDev

				  --BMImportProcess = BMImport(tblDLToDMap)
                  WHILE (@CurrentRow <= @tempRowCount)
                        BEGIN
                              SELECT @AccounttId=AcctID, @DlactiveId=DLID, @IsLoanDL=Isloan FROM #tempDltoDev WHERE ROWID=@CurrentRow --LNRED-1424
                              
                              UPDATE [tblDLToDeviceMapping]
                              SET
                              [DLStatus]=@DlStatusDER,
                              [LastUpdatedBy]='BMImport(tblDLToDMap)',
                              [LastUpdatedDate]=@ModifiedDateTime
							  -- SK check for users in tblEntitlement and check if it's a trial account or not
                              WHERE UserID in (
								SELECT [tblUser].UserID 
								from tblUser 
								join tblEntitlements
								on tblUser.UserID = tblEntitlements.UserID
								WHERE tblUser.AccountId=@AccounttId
								and [tblEntitlements].[IsActive] = 1
								and ([tblEntitlements].[Trial] = 0 and [tblEntitlements].ValidTo > @ModifiedDateTime)
								AND Isloan=@IsLoanDL --LNRED-1424
								) 								
								AND DLID=@DlactiveId
                              
                              SET @CurrentRow = @CurrentRow + 1
                        END

                  DROP TABLE #tempDltoDev 
                                    
                  INSERT INTO [dbo].[tblDLToDeviceMappingHst]
                        ([DLDeviceMappingId]
                        ,[DeviceId]
                        ,[DLID]
                        ,[UserID]
                        ,[DLVersion]
                        ,[DLStatus]
                        ,[LastUpdatedDate]
                        ,[LastUpdatedBy]
                        ,[CreatedDate]
                        ,[CreatedBy])
                  SELECT [DLDeviceMappingId]
                           ,[DeviceId]
                           ,[DLID]
                           ,[UserID]
                           ,[DLVersion]
                           ,[DLStatus]
                           ,[LastUpdatedDate]
                           ,[LastUpdatedBy]
                           ,[CreatedDate]
                           ,[CreatedBy]
                  FROM [dbo].[tblDLToDeviceMapping]
				  -- SK check for users in tblEntitlement and check if it's a trial account or not
                  WHERE [UserID] IN
                              (SELECT DISTINCT [tblUser].[UserID] 
                               FROM [dbo].[tblUser]
							   join [dbo].[tblEntitlements]
							   on tblUser.UserID = tblEntitlements.UserID
                              WHERE [tblUser].[AccountID] IN
                                    (SELECT AccountID 
                                      FROM [dbo].[tblAccount] 
                                      WHERE [LastUpdatedDate] < @ModifiedDateTime)
								and [tblEntitlements].[IsActive] = 1
								and ([tblEntitlements].[Trial] = 0 and [tblEntitlements].ValidTo > @ModifiedDateTime)
								)
                                      
                  --Update DL Status to 'Removed by eReader' to replicate account deletion				 
				  -- BMImportProcess = BMImport(DLToDevMap-Acc Del)
                  UPDATE [dbo].[tblDLToDeviceMapping]
                  SET
                        [DLStatus]=@DlStatusDER,
                        [LastUpdatedBy]='BMImport(DLToDevMap-Acc Del)',
                        [LastUpdatedDate]=@ModifiedDateTime
                  WHERE [UserID] IN
                              (SELECT DISTINCT [tblUser].[UserID] 
                               FROM [dbo].[tblUser]
                              WHERE [tblUser].[AccountId] IN
                                    (SELECT AccountID 
                                      FROM [dbo].[tblAccount] 
                                      WHERE [LastUpdatedDate] < @ModifiedDateTime)					  
									  )

                  --Update entitlements if the subscription to the product is not available
                  CREATE TABLE #tempEntDel
                  (
                        ROWID INT IDENTITY(1,1),
                        DLID INT,
                        AcctID INT,
						Isloan bit
                  );

                  INSERT INTO #tempEntDel
                        SELECT DISTINCT dl.DLID,sm.AccountID, sm.IsLoan FROM [dbo].[tblSubscriptionsMapping] sm 
                        INNER JOIN [dbo].[tblDL] dl ON sm.ProductId=dl.ProductId WHERE sm.[LastUpdatedDate] < @ModifiedDateTime
                                                
                  DECLARE @tempTblRowCount AS INT
                  DECLARE @CurrRow AS INT = 1
                  DECLARE @AcctId AS INT
                  DECLARE @DLID AS INT
				  DECLARE @IsLoan as bit

                  SELECT @tempTblRowCount = COUNT(ROWID) FROM #tempEntDel

                  WHILE (@CurrRow <= @tempTblRowCount)
                        BEGIN
                              SELECT @AcctId=AcctID, @DLID=DLID, @IsLoan=Isloan FROM #tempEntDel WHERE ROWID=@CurrRow
                              
							  --BMImportProcess = BMImport(#tempEntDel)
                              UPDATE tblEntitlements
                              SET
                                    IsActive=0,
                                    LastUpdatedBy='BMImport(#tempEntDel)',
                                    LastUpdatedDate=@ModifiedDateTime
                              WHERE AccountID=@AcctId AND DLID=@DLID AND IsLoan=@IsLoan
							  and Trial <> 1
                              --and (Trial <> 1 and ValidTo < @ModifiedDateTime)
							  --and
							  --(
								--(ValidTo < @ModifiedDateTime)
								 --or (ValidTo > @ModifiedDateTime and IsLoan <> 1)
							  --)
                              
                              --Reset for getting back the annotations if sub is created again
                              --ER 47
							   UPDATE [dbo].[tblSyncDeviceInfo]
							   SET [LSST] = '1-1-2000',
							   LastModifiedOn =  GETUTCDATE()
							   WHERE [SyncID] IN (SELECT SyncID FROM tblSyncMaster WHERE 
							   [UserID] IN (SELECT DISTINCT [UserID]   
										   FROM [dbo].[tblUser]  
										  WHERE [AccountID] = @AcctId) AND DLID = @DLID)
                              
                              SET @CurrRow = @CurrRow + 1
                        END

                  DROP TABLE #tempEntDel  

                  -- Update entitlements to replicate account deletion
				  -- BMImportProcess = BMImport(update-tblEntitlements)
                  UPDATE [dbo].[tblEntitlements]
                  SET
                        [IsActive] = 0
                        ,[LastUpdatedDate]=@ModifiedDateTime
                        ,[LastUpdatedBy]='BMImport(up-tblEntitlements)'
                  WHERE AccountID in 
                  ( SELECT AccountID FROM [dbo].[tblAccount] WHERE [LastUpdatedDate] < @ModifiedDateTime)
                  
                   --Update all users of the account
                   --ER 47 - Te reset so that annotations of users can be got back if account recreated
				   UPDATE [dbo].[tblSyncDeviceInfo]
				   SET [LSST] = '1-1-2000',
				   LastModifiedOn =  GETUTCDATE()
				   WHERE [SyncID] IN (SELECT SyncID FROM tblSyncMaster WHERE 
				   [UserID] IN (SELECT DISTINCT [UserID]   
							    FROM [dbo].[tblUser]  
							    WHERE [AccountID] IN  
									(SELECT AccountID   
									  FROM [dbo].[tblAccount]   
									  WHERE [LastUpdatedDate] < @ModifiedDateTime))
								)
                  
                  --Update the subscription mappings for removed subscriptions
				  -- BMImportProcess = BMImport (up-tblSubsMap)
                  UPDATE [dbo].[tblSubscriptionsMapping]
                  SET
                        [IsActive]=0
                        ,[LastUpdatedBy]='BMImport (up-tblSubsMap)'
                        ,[LastUpdatedDate]=@ModifiedDateTime
                  WHERE [LastUpdatedDate] < @ModifiedDateTime     

                  -- Update mappings to replicate account deletion
				  -- BMImportProcess = BMImport (up-tblSubsMap 2)
                  UPDATE [dbo].[tblSubscriptionsMapping]
                  SET
                        [IsActive] = 0
                        ,[LastUpdatedDate]=@ModifiedDateTime
                        ,[LastUpdatedBy]='BMImport (up-tblSubsMap2)'
                  WHERE AccountID in 
                  ( SELECT AccountID FROM [dbo].[tblAccount] WHERE [LastUpdatedDate] < @ModifiedDateTime)
                
                --Delete devices registered for the users 
				-- BMImportProcess = BMImport (del-tblDev)
                UPDATE [dbo].[tblDevice]
                  SET
                        [IsActive]=0,
                        [LastUpdatedBy]='BMImport (del-tblDev)',
                        [LastUpdatedDate]=@ModifiedDateTime
                  WHERE [UserID] IN 
                  (SELECT [UserID] 
                   FROM [dbo].[tblUser] 
                   WHERE AccountID IN 
                              (SELECT AccountID 
                               FROM [dbo].[tblAccount] 
                               WHERE [LastUpdatedDate] < @ModifiedDateTime))
                  
                  -- Insert into history table of Users
                  INSERT INTO [dbo].[tblUserHst]    
                        ([UserID],
                        [AccountID],
                        [FirstName], 
                         [LastName], 
                         [EmailAddress], 
                         [Password],
                        [LastSignIn], 
                         [DaysRemainingBefLock], 
                         [LastUpdatedBy], 
                         [LastUpdatedDate], 
                         [IsActive])
                                                  
                  SELECT  [UserID], 
                              [AccountID], 
                              [FirstName], 
                              [LastName], 
                              [EmailAddress], 
                              [Password],
                              [LastSignIn], 
                              [DaysRemainingBefLock], 
                              [LastUpdatedBy], 
                              [LastUpdatedDate], 
                              [IsActive]    
                  FROM [dbo].tblUser     
                  WHERE IsActive=1 
                              AND [AccountID] IN
                                          (SELECT AccountID 
                                           FROM [dbo].[tblAccount] 
                                           WHERE [LastUpdatedDate] < @ModifiedDateTime)
                                    
                  -- Update Users to replicate account deletion
				  -- BMImportProcess = BMImport (up-tblUser)
                  UPDATE [dbo].[tblUser]
                  SET
                        [IsActive] = 0
                        ,[LastUpdatedDate]=@ModifiedDateTime
                        ,[LastUpdatedBy]='BMImport (up-tblUser)'
                  WHERE AccountID in 
                  (SELECT AccountID FROM [dbo].[tblAccount] WHERE [LastUpdatedDate] < @ModifiedDateTime)
                        
                  -- Update accounts for all deleted rows
				  -- BMImportProcess = BMImport (up-tblAcc)
                  UPDATE [dbo].[tblAccount]
                  SET
                        [IsActive] = 0
                        ,[LastUpdatedDate]=@ModifiedDateTime
                        ,[LastUpdatedBy]='BMImport (up-tblAcc)'
                  WHERE AccountID in 
                  ( SELECT AccountID FROM [dbo].[tblAccount] WHERE [LastUpdatedDate] < @ModifiedDateTime)

            COMMIT TRANSACTION TransDeleteAccount
      END TRY     
      BEGIN CATCH
            ROLLBACK TRANSACTION TransDeleteAccount
            
            DECLARE @ErrorMessage NVARCHAR(4000);
            DECLARE @ErrorSeverity INT;
            DECLARE @ErrorState INT;

            SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();
            RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
      END CATCH
END
GO
PRINT N'Altering [dbo].[uspGetDlDetails]...';


GO
-- =============================================      
-- Author   : David Paul (245994)      
-- Create date: 27rd Sep 2011      
-- Description: This stored procedure is used to       
--    get the device and DL details for      
--    the given username.      
-- Change History:
-- Author : A.K. Kumanan(142423)
-- 	Modification done to get the device level information during listing of dl for specfic user.
-- =============================================      
ALTER PROCEDURE [dbo].[uspGetDlDetails]       
 @Username varchar(50),      
 @DeviceId varchar(500)      
AS      
BEGIN      
	SET NOCOUNT ON;      
    BEGIN TRY      
		
		DECLARE @DeleteByEreaderStatusCode INT = 0,@DeletebyUserStatusCode INT = 0, @UserID INT = 0,
		@NotDownloadedStatusCode INT =0;
		 
		SELECT @NotDownloadedStatusCode = Id FROM dbo.tblDLStatus WHERE [Description] ='Not downloaded' AND IsActive = 1; 
		SELECT @DeletebyUserStatusCode = Id FROM tblDLStatus WHERE [Description] ='Removed by user' AND IsActive = 1;
		SELECT @DeleteByEreaderStatusCode = Id FROM tblDLStatus WHERE [Description] ='Removed by eReader' AND IsActive =1;
		SELECT @UserID = UserID FROM dbo.tblUser WHERE EmailAddress = @Username AND IsActive = 1;
		
		INSERT INTO [dbo].[tblDLToDeviceMappingHst]
			([DLDeviceMappingId]
			,[DeviceId]
			,[DLID]
			,[UserID]
			,[DLVersion]
			,[DLStatus]
			,[LastUpdatedDate]
			,[LastUpdatedBy]
			,[CreatedDate]
			,[CreatedBy])
		SELECT [DLDeviceMappingId]
			   ,[DeviceId]
			   ,[DLID]
			   ,[UserID]
			   ,[DLVersion]
			   ,[DLStatus]
			   ,[LastUpdatedDate]
			   ,[LastUpdatedBy]
			   ,[CreatedDate]
			   ,[CreatedBy]
		FROM [dbo].[tblDLToDeviceMapping]
		WHERE [UserID] = @UserID
				AND DLID IN (SELECT ent.[DLID] 
							FROM [dbo].[tblEntitlements] ent
									INNER JOIN
								[dbo].[tblDLToDeviceMapping] dtdm
									ON dtdm.DLID = ent.DLID AND dtdm.[UserID] = ent.[UserID]
							WHERE ent.[IsActive] = 1 
								AND ent.[UserID] = @UserID
								AND CAST(ent.[ValidTo] AS DATE) < CAST(GETDATE() AS DATE)
								AND ent.[DLID] NOT IN (SELECT eent.[DLID] FROM [tblEntitlements] eent WHERE eent.IsActive=1 AND eent.UserID=@UserID AND CAST(eent.[ValidTo] AS DATE) >= CAST(GETDATE() AS DATE))
								AND ISNULL(dtdm.[DLStatus],0) <> @DeleteByEreaderStatusCode
							GROUP BY ent.DLID)
		
		
		--ER 47
		UPDATE [dbo].[tblSyncDeviceInfo]
		SET [LSST] = '1-1-2000',
			LastModifiedOn = GETUTCDATE()
		WHERE [SyncID] IN (SELECT SyncID 
						   FROM tblSyncMaster WHERE 
							[DLID] IN (SELECT ent.[DLID] 
										FROM [dbo].[tblEntitlements] ent
											--INNER JOIN
											--[dbo].[tblDLToDeviceMapping] dtdm
											--ON dtdm.DLID = ent.DLID AND dtdm.[UserID] = ent.[UserID]
										WHERE ent.[IsActive] = 1 
											AND ent.[UserID] = @UserID
											AND CAST(ent.[ValidTo] AS DATE) < CAST(GETDATE() AS DATE)
											AND ent.[DLID] NOT IN (SELECT eent.[DLID] FROM [tblEntitlements] eent WHERE eent.IsActive=1 AND eent.UserID=@UserID AND CAST(eent.[ValidTo] AS DATE) >= CAST(GETDATE() AS DATE))
											--AND ISNULL(dtdm.[DLStatus],0) <> @DeleteByEreaderStatusCode
										GROUP BY ent.DLID)
							AND [UserID] = @UserID) 
		AND [DeviceID] = @DeviceId
		
		UPDATE [dbo].[tblDLToDeviceMapping]
		SET
			DLStatus = @DeleteByEreaderStatusCode
		WHERE [UserID] = @UserID
				AND DLID IN (SELECT ent.[DLID] 
							FROM [dbo].[tblEntitlements] ent
									INNER JOIN
								[dbo].[tblDLToDeviceMapping] dtdm
									ON dtdm.DLID = ent.DLID AND dtdm.[UserID] = ent.[UserID]
							WHERE ent.[IsActive] = 1 
								AND ent.[UserID] = @UserID
								AND CAST(ent.[ValidTo] AS DATE) < CAST(GETDATE() AS DATE)
								AND ent.[DLID] NOT IN (SELECT eent.[DLID] FROM [tblEntitlements] eent WHERE eent.IsActive=1 AND eent.UserID=@UserID AND CAST(eent.[ValidTo] AS DATE) >= CAST(GETDATE() AS DATE))
								AND ISNULL(dtdm.[DLStatus],0) <> @DeleteByEreaderStatusCode
							GROUP BY ent.DLID)
		
		
		

		SELECT DISTINCT    
			[dl].[DLID] as [DLID],     e.EntitlementId, 
			@DeviceId, 
			ISNULL([ddl].DLVersion,0) AS [LastDownloadedVersion],      
			[dl].[LatestVersion] AS [LatestVersion],      
			[dl].[Description] AS [Description],      
			[dl].[LastUpdatedDate] AS [LastUpdatedDate],      
			[dl].[FileSize] AS [FileSize],      
			[dl].[DLTitle] AS [DLTitle],
			e.IsLoan,
			e.ValidTo,
			e.Trial -- LNRED-153          
		FROM tblUser u    
			INNER JOIN [tblEntitlements] e ON e.UserID = u.UserID     
			INNER JOIN tblDL dl ON e.DLID = dl.DLID      
			LEFT OUTER JOIN tblDLToDeviceMapping ddl 
			ON ddl.DLID = dl.DLID AND ddl.UserID = u.UserID AND ddl.DeviceId = @DeviceId
		WHERE u.EmailAddress = @Username AND       
			u.IsActive=1  AND e.IsActive = 1 AND dl.IsActive = 1 
			AND DATEDIFF(D,GETDATE(),e.ValidTo) >= 0 AND DATEDIFF(D,GETDATE(),e.ValidFrom) <= 0
			AND ISNULL(ddl.DLStatus,@NotDownloadedStatusCode) NOT IN (@DeletebyUserStatusCode,@DeleteByEreaderStatusCode)
ORDER BY 1;
	END TRY      
	BEGIN CATCH      
		DECLARE @ErrorMessage NVARCHAR(4000);      
		DECLARE @ErrorSeverity INT;      
		DECLARE @ErrorState INT;      
      
		SELECT @ErrorMessage = ERROR_MESSAGE(),      
           @ErrorSeverity = ERROR_SEVERITY(),      
           @ErrorState = ERROR_STATE();      
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);      
 END CATCH      
END
GO
PRINT N'Altering [dbo].[uspGetUserSubscriptionEligibilityByDLID]...';


GO
-- ============================================================
-- Author:		Shahid Ali
-- Create date: 20/06/2013 
-- Description:
-- Returns User's Entitlements Status for the users under the provided Billing Account.
-- If a DL is not returned, that DL can't be assigned to the user.
-- The reason for ineligibility for assigning DL is also returned.
-- ============================================================
ALTER PROCEDURE [dbo].[uspGetUserSubscriptionEligibilityByDLID]
	@DLID INT,
	@IsLoan BIT,
	@BillingAccountNo BIGINT
AS
BEGIN
	SELECT
		UserID,
		FirstName,
		LastName,
		EmailAddress,
		DLID,
		ISNULL(DLTitle, '')			AS DLTitle,
		AccountMaxEntitlements		AS AccountMaxEntitlements,		-- Number of entitlements(loan/subscriptions) allowed to the billing account.
		ISNULL(AccountActiveEntitlements,0)	AS AccountActiveEntitlements,	-- Number of entitlements(loan/subscriptions) currently in use by the billing account.
		CAST(IsSubscribed AS BIT)			AS IsSubscribed,
		CAST(IsTrialSubscribed AS BIT)		AS IsTrialSubscribed,
		CAST(IsLoaned AS BIT)		AS IsLoaned,
		CAST(IsRequested AS BIT)	AS IsRequested,
		CanLoan, 
		CanSuperUserLoan,
		CanSubscribe,
		CanSuperUserSubscribe,
		ISNULL(UserMaxLoans, 0)		AS UserMaxLoans,	-- Number of max loans allowed to this user. This is set by the knowledge manager by setting the Borrowing limit.
		ISNULL(UserActiveLoans, 0)	AS UserActiveLoans,	-- Number of loans currently taken by this user.		
		ISNULL(Comments, '')		AS Comments,
		AvailableDate,
		RequestedDate
	FROM vwUserEntitlements --UE 
	WHERE @IsLoan = IsLoan
		AND @BillingAccountNo = BillingAccountNum
		AND @DLID = DLID
	ORDER BY UserID
END
GO
PRINT N'Altering [dbo].[uspGetUserSubscriptionEligibilityByUserID]...';


GO
-- ============================================================
-- Author:		Shahid Ali
-- Create date: 20/06/2013 
-- Description:
-- Returns User's Entitlements Status.
-- If a DL is not returned, that DL can't be assigned to the user.
-- The reason for ineligibility for assigning DL is also returned.
-- ============================================================
ALTER PROCEDURE [dbo].[uspGetUserSubscriptionEligibilityByUserID]
	@UserID INT,
	@IsLoan BIT = 0
AS
BEGIN
	SELECT
		UserID,
		FirstName,
		LastName,
		EmailAddress,
		DLID,
		ISNULL(DLTitle, '')			AS DLTitle,
		AccountMaxEntitlements		AS AccountMaxEntitlements,		-- Number of entitlements(loan/subscriptions) allowed to the billing account.
		ISNULL(AccountActiveEntitlements,0)	AS AccountActiveEntitlements,	-- Number of entitlements(loan/subscriptions) currently in use by the billing account.
		CAST(IsSubscribed AS BIT)			AS IsSubscribed,
		CAST(IsTrialSubscribed AS BIT)		AS IsTrialSubscribed,
		CAST(IsLoaned AS BIT)		AS IsLoaned,
		CAST(IsRequested AS BIT)	AS IsRequested,
		CanLoan, 
		CanSubscribe,
		CanSuperUserSubscribe,
		CanSuperUserLoan,
		ISNULL(UserMaxLoans, 0)		AS UserMaxLoans,	-- Number of max loans allowed to this user. This is set by the knowledge manager by setting the Borrowing limit.
		ISNULL(UserActiveLoans, 0)	AS UserActiveLoans,	-- Number of loans currently taken by this user.		
		ISNULL(Comments, '')		AS Comments,
		AvailableDate,
		RequestedDate
	FROM vwUserEntitlements
	WHERE @IsLoan = IsLoan
		AND @UserID = UserID
	ORDER BY DLTitle

END
GO
PRINT N'Altering [dbo].[uspInsertUpdateEntitlement]...';


GO
-- ============================================================
-- Author:		Shahid Ali
-- Create date: 07-Jun-013
-- Description:	To insert/update one row for a loan/subscription
-- ============================================================
ALTER PROCEDURE [dbo].[uspInsertUpdateEntitlement]
	@SubID INT=NULL, 
	@DLID INT,  
	@BillingAccountNo BIGINT, 
	@DatePurchased DATETIME = NULL,
	@ValidFrom DATETIME, 
	@ValidTo DATETIME=NULL, 
	@Trial BIT=0, 
	@UserID INT, 
	@IsLoan BIT=0,	-- Default is subscription
	@CreatedORUpdatedBy VARCHAR(50), 
	@Comments VARCHAR(4000)=NULL
AS
BEGIN
	BEGIN TRY
		--Local variables declaration
		DECLARE @AccountID					INT,
				@CanLoan					BIT,
				@CanSuperUserLoan			BIT,
				@CanSubscribe				BIT,
				@CanSuperUserSubscribe		BIT,
				@IsEligible					BIT,
				@DlStatusND					INT,
				@ProductId					VARCHAR(50),
				@AccountActiveEntitlements	INT,
				@AccountMaxEntitlements		INT,
				@CommentsReason				VARCHAR(1000),
				@IsSuperUser				BIT = 0,
				@IsLoaned					BIT,
				@IsSubscribed				BIT
			
		-- Check the eligibility of new entitlement against the given DL and the user
		SELECT 
			@CanLoan=CanLoan, 
			@CanSuperUserLoan=CanSuperUserLoan, 
			@CanSubscribe=CanSubscribe, 
			@CanSuperUserSubscribe=CanSuperUserSubscribe,
			@AccountActiveEntitlements=AccountActiveEntitlements, 
			@AccountMaxEntitlements=AccountMaxEntitlements, 
			@CommentsReason=Comments,
			@ProductId=ProductId
		FROM 
			vwUserEntitlements 
		WHERE 
			DLID = @DLID AND 
			@BillingAccountNo = BillingAccountNum AND 
			@UserID = UserID AND 
			@IsLoan = IsLoan

		SELECT @AccountID = AccountID 
		FROM tblAccount 
		WHERE BillingAccountNum = @BillingAccountNo

		-- Check if @CreatedORUpdatedBy is not an email, means it's coming from SMS
		SELECT @IsSuperUser = 1 WHERE CHARINDEX(N'@', @CreatedORUpdatedBy) = 0

		IF ((@IsLoan = 1 AND @CanLoan=1) OR (@IsLoan = 0 AND @CanSubscribe=1))
			SET @IsEligible = 1

		IF (@SubID IS NOT NULL) -- Allow update to an existing entitlement
			SET @IsEligible = 1

		-- If the loan request coming from super user
		IF (@IsEligible IS NULL AND @IsSuperUser = 1 AND (@IsLoan = 1 AND @CanSuperUserLoan = 1)) 
			SET @IsEligible = 1

		-- If the subscription request coming from super user, we can ignore cooling off period
		IF (@IsEligible IS NULL AND @IsSuperUser = 1 AND (@IsLoan = 0 AND @CanSuperUserSubscribe = 1)) 
			SET @IsEligible = 1

		-- If it's for trial, then go ahead
		IF (@IsEligible IS NULL AND @IsSuperUser = 1 AND @Trial = 1) 
			SET @IsEligible = 1

		IF (@IsEligible = 0)
		BEGIN
			IF NOT(@Trial = 1 AND @AccountActiveEntitlements >= @AccountMaxEntitlements)
				PRINT ('There is no DL entitlements limit for Trial Subscription')
			ELSE
				RAISERROR (@CommentsReason, 16, 1);
		END
		ELSE IF (@IsEligible IS NULL)
		BEGIN
			IF (@AccountActiveEntitlements >= @AccountMaxEntitlements)
				RAISERROR ('DL has reached entitlements limit', 16, 1);
			ELSE IF(@CommentsReason <> '')
				RAISERROR (@CommentsReason, 16, 1);
			ELSE
				RAISERROR ('The DL is not available or not active', 16, 1);
		END

		SELECT @DlStatusND=[Id] FROM [dbo].[tblDLStatus] WHERE [Description]='Not downloaded'

		-- SET DatePurchased and ValidTo defaults
		SELECT @DatePurchased = ISNULL(@DatePurchased, getdate())
			,@ValidTo = CASE WHEN @ValidTo IS NULL AND @IsLoan=1 THEN 
				DATEADD(Day, 
				ISNULL((SELECT top 1 DefaultBorrowTimeDays FROM tblAccountProductDefaults WHERE AccountID=@AccountID AND ProductId=@ProductId), 1) -- If no defaults available then allow 1 day loan
					, GETDATE())
			ELSE @ValidTo END

		IF(@SubID IS NOT NULL) -- Update to an existing entitlement
			BEGIN
				INSERT INTO [dbo].[tblDLToDeviceMappingHst]
					([DLDeviceMappingId]
					,[DeviceId]
					,[DLID]
					,[UserID]
					,[DLVersion]
					,[DLStatus]
					,[LastUpdatedDate]
					,[LastUpdatedBy]
					,[CreatedDate]
					,[CreatedBy])
				SELECT [DLDeviceMappingId]
						,[DeviceId]
						,[DLID]
						,[UserID]
						,[DLVersion]
						,[DLStatus]
						,[LastUpdatedDate]
						,[LastUpdatedBy]
						,[CreatedDate]
						,[CreatedBy]
				FROM [dbo].[tblDLToDeviceMapping]
				WHERE [UserID]=@UserID
						AND [DLID]=@DLID
								
				UPDATE [dbo].[tblDLToDeviceMapping]
				SET
					[DLStatus]=@DlStatusND,
					[LastUpdatedBy]=@CreatedORUpdatedBy,
					[LastUpdatedDate]=GETDATE()
				WHERE [UserID]=@UserID
						AND [DLID]=@DLID
				
				UPDATE [dbo].[tblEntitlements]
				SET 
					[ValidTo] = @ValidTo, 
					[Trial] = @Trial,
					[Comments] = @Comments,
					[LastUpdatedBy] = @CreatedORUpdatedBy,
					[LastUpdatedDate] = GETDATE()
				WHERE [EntitlementId] = @SubID		
			END
		ELSE
		BEGIN
			INSERT INTO [dbo].[tblEntitlements]
				([DLID]
				,[AccountID]
				,[DatePurchased]
				,[ValidFrom]
				,[ValidTo]
				,[Trial]
				,[UserID]
				,[IsActive]
				,[IsLoan]
				,[LastUpdatedBy]
				,[LastUpdatedDate]
				,[CreatedBy]
				,[CreatedDate])
			VALUES
				(@DLID
				,@AccountID
				,ISNULL(@DatePurchased, GETDATE())
				,@ValidFrom
				,@ValidTo
				,@Trial
				,@UserID
				,1
				,@IsLoan	-- Loan/Subscription
				,@CreatedORUpdatedBy
				,GETDATE()
				,@CreatedORUpdatedBy
				,GETDATE())
				
			INSERT INTO [dbo].[tblDLToDeviceMappingHst]
				([DLDeviceMappingId]
				,[DeviceId]
				,[DLID]
				,[UserID]
				,[DLVersion]
				,[DLStatus]
				,[LastUpdatedDate]
				,[LastUpdatedBy]
				,[CreatedDate]
				,[CreatedBy])
			SELECT [DLDeviceMappingId]
				   ,[DeviceId]
				   ,[DLID]
				   ,[UserID]
				   ,[DLVersion]
				   ,[DLStatus]
				   ,[LastUpdatedDate]
				   ,[LastUpdatedBy]
				   ,[CreatedDate]
				   ,[CreatedBy]
			FROM [dbo].[tblDLToDeviceMapping]
			WHERE [UserID]=@UserID
					AND [DLID]=@DLID
					
			UPDATE [dbo].[tblDLToDeviceMapping]
			SET
				[DLStatus]=@DlStatusND,
				[DLVersion]=NULL,
				[LastUpdatedBy]=@CreatedORUpdatedBy,
				[LastUpdatedDate]=GETDATE()
			WHERE [UserID]=@UserID
					AND [DLID]=@DLID

			UPDATE [dbo].[tblUserProductRequests]
				SET IsFulfilled = 1
			WHERE [UserID] = @UserID AND [ProductId] = @ProductId AND [IsLoan] = @IsLoan
		END
	END TRY	
	BEGIN CATCH
	   DECLARE @ErrorMessage NVARCHAR(4000);
	   DECLARE @ErrorSeverity INT;
	   DECLARE @ErrorState INT;

		SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
PRINT N'Altering [dbo].[uspSyncUpward]...';


GO
ALTER PROCEDURE [dbo].[uspSyncUpward]
	@UserName VARCHAR(50),
	@DlId INT,
	@DlVersion INT,
	@DeviceId VARCHAR(500),
	@AnnotationCode VARCHAR(50),
	@Content XML,
	@Status VARCHAR(50),
	@ServerTime DATETIME
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY  
			
		DECLARE @UserID INT 
		SELECT @UserID = UserID FROM tblUser WHERE EmailAddress = @UserName AND IsActive = 1
						
		IF NOT EXISTS (SELECT 1 FROM tblSyncMaster
					   WHERE UserID = @UserID AND DLID = @DlId)
		BEGIN
			INSERT INTO tblSyncMaster 
			   (UserID,
				DLID,
				DLVersionID,
				LastModifiedOn)
			VALUES
			   (@UserID,
				@DlId,
				NULL,
				@ServerTime)
		END
		
		DECLARE @SyncID BIGINT 
		SELECT @SyncID = SyncID FROM tblSyncMaster WHERE UserID = @UserID AND DLID = @DlId
								  
		IF NOT EXISTS(SELECT 1 FROM tblSyncDeviceInfo WHERE SyncID=@SyncID AND DeviceID = @DeviceId)
		BEGIN		
		   INSERT INTO tblSyncDeviceInfo
			(SyncID,
			 DeviceID,
			 IsSyncComplete,
			 LSST,
			 LastModifiedOn)
		   VALUES
		    (@SyncID,
		     @DeviceId,
		     0,
		     @ServerTime,
		     @ServerTime)
		END		
		
		IF(@Status = 'deleted')
			BEGIN
			
				UPDATE tblAnnotations 
				SET  IsActive = 0, LastModifiedOn = @ServerTime
				FROM tblAnnotations AS a
				WHERE AnnotationCode = @AnnotationCode AND
					a.SyncID = @SyncID
			END
		ELSE IF EXISTS (SELECT 1 FROM tblAnnotations a WHERE AnnotationCode = @AnnotationCode AND a.SyncID = @SyncID)
			BEGIN
				
				UPDATE tblAnnotations
				SET AnnotationContent = @Content, LastModifiedOn = @ServerTime
				FROM tblAnnotations AS a
				WHERE AnnotationCode = @AnnotationCode AND
					a.SyncID = @SyncID
			END
		ELSE
			BEGIN
				
				INSERT INTO tblAnnotations
					(SyncID,
					 AnnotationCode,
					 AnnotationContent,
					 IsActive,
					 CreatedOn,
					 LastModifiedOn)
				VALUES
					(@SyncID,
					 @AnnotationCode,
					 @Content,
					 1,
					 @ServerTime,
					 @ServerTime)
			END	
		
	END TRY  	
	BEGIN CATCH    
		DECLARE @ErrorMessage NVARCHAR(4000);    
		DECLARE @ErrorSeverity INT;    
		DECLARE @ErrorState INT;    
    
		SELECT 
			@ErrorMessage = ERROR_MESSAGE(),    
			@ErrorSeverity = ERROR_SEVERITY(),    
			@ErrorState = ERROR_STATE();    
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);    
 END CATCH  
END
GO
PRINT N'Creating [dbo].[uspGetSyncDetail]...';


GO
-- ============================================================
-- Author:		Huberto Dharmawan
-- Create date: 07-Apr-2015
-- Description: Get Sync Detail. Create new record if doesnt exist
-- ============================================================
CREATE PROCEDURE [dbo].[uspGetSyncDetail]
	@UserID INT,
	@DlId INT,
	@ServerTime DATETIME
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF NOT EXISTS (SELECT 1 FROM tblSyncMaster WHERE UserID = @UserID AND DLID = @DlId)
	BEGIN
		INSERT INTO tblSyncMaster 
			(UserID,
			DLID,
			DLVersionID,
			LastModifiedOn)
		VALUES
			(@UserID,
			@DlId,
			NULL,
			@ServerTime)
	END

	SELECT * 
	FROM tblSyncMaster 
	WHERE UserID = @UserID AND DLID = @DlId
END
GO
PRINT N'Creating [dbo].[uspGetUserDlAnnotations]...';


GO
-- ============================================================  
-- Author:  DWS Pty Ltd
-- Create date: 27/03/2015
-- Description: Get all annotations for a user
-- ============================================================  
CREATE PROCEDURE [dbo].[uspGetUserDlAnnotations]  
	@DLID INT,  
	@UserID INT 
AS 
BEGIN    
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @SyncID BIGINT 
	SELECT @SyncID = SyncID FROM tblSyncMaster WHERE UserID = @UserID AND DLID = @DLID
    
	SELECT sm.UserID, sm.DLID, sm.SyncID, a.*
	FROM tblAnnotations a INNER JOIN tblSyncMaster sm ON a.SyncID = sm.SyncID
	WHERE sm.SyncID = @SyncID
END
GO
PRINT N'Creating [dbo].[uspInsertOrUpdateAnnotation]...';


GO
-- ============================================================
-- Author:		Huberto Dharmawan
-- Create date: 31-Mar-2015
-- Description:	Transfer one annotation from the alternate books
-- ============================================================
CREATE PROCEDURE [dbo].[uspInsertOrUpdateAnnotation]
	@SyncID INT,
	@AnnotationCode NVARCHAR (50),
	@AnnotationContent XML,
	@IsActive BIT,
	@CreatedOn DATETIME,
	@LastModifiedOn DATETIME,
	@ServerTime DATETIME
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY  
			
		IF NOT EXISTS (SELECT 1 FROM tblAnnotations WHERE SyncID = @SyncID AND AnnotationCode = @AnnotationCode)
			BEGIN
				--INSERT INTO tblLog (LogContent, CreatedOn) VALUES ('Inserting ' + @AnnotationCode + ' ' + CAST(@SyncID AS NVARCHAR(10)), @ServerTime)

				-- insert
				INSERT INTO tblAnnotations
					(SyncID,
					 AnnotationCode,
					 AnnotationContent,
					 IsActive,
					 EntitlementID,
					 CreatedOn,
					 LastModifiedOn)
				VALUES
					(@SyncID,
					 @AnnotationCode,
					 @AnnotationContent,
					 @IsActive,
					 NULL,
					 @CreatedOn,
					 @LastModifiedOn)
				
			END
		ELSE
			BEGIN
				
				--INSERT INTO tblLog (LogContent, Additional1, CreatedOn) VALUES ('Updating ' + @AnnotationCode + ' ' + CAST(@SyncID AS NVARCHAR(10)), @AnnotationContent, @ServerTime)

				-- update
				UPDATE tblAnnotations
				SET 
					AnnotationContent = @AnnotationContent,
					IsActive = @IsActive,
					LastModifiedOn = @LastModifiedOn
				WHERE 
					SyncID = @SyncID AND 
					AnnotationCode = @AnnotationCode
			END
			

	END TRY  	
	BEGIN CATCH    
		DECLARE @ErrorMessage NVARCHAR(4000);    
		DECLARE @ErrorSeverity INT;    
		DECLARE @ErrorState INT;    
    
		SELECT 
			@ErrorMessage = ERROR_MESSAGE(),    
			@ErrorSeverity = ERROR_SEVERITY(),    
			@ErrorState = ERROR_STATE();    
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);    
 END CATCH  
END
GO
PRINT N'Creating [dbo].[uspTransferAnnotations]...';


GO
-- ============================================================
-- Author:		Huberto Dharmawan
-- Create date: 31-Mar-2015
-- Description:	Transfer annotations from the alternate books
-- ============================================================
CREATE PROCEDURE [dbo].[uspTransferAnnotations]
	@UserID INT,
	@FromDlId INT,
	@ToDlId INT,
	@Status VARCHAR(50),
	@ServerTime DATETIME
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY  
			
		IF NOT EXISTS (SELECT 1 FROM tblSyncMaster WHERE UserID = @UserID AND DLID = @ToDlId)
		BEGIN
			INSERT INTO tblSyncMaster 
			   (UserID,
				DLID,
				DLVersionID,
				LastModifiedOn)
			VALUES
			   (@UserID,
				@ToDlId,
				NULL,
				@ServerTime)
		END
		
		DECLARE @FromSyncID BIGINT 
		SELECT @FromSyncID = SyncID FROM tblSyncMaster WHERE UserID = @UserID AND DLID = @FromDlId
		
		DECLARE @ToSyncID BIGINT 
		SELECT @ToSyncID = SyncID FROM tblSyncMaster WHERE UserID = @UserID AND DLID = @ToDlId
								  
		IF(@Status = 'transfer')
			BEGIN
		
				UPDATE tblAnnotations
				SET IsActive = 0
				WHERE SyncID = @ToSyncID

				INSERT INTO tblAnnotations
					(SyncID,
					 AnnotationCode,
					 AnnotationContent,
					 IsActive,
					 EntitlementID,
					 CreatedOn,
					 LastModifiedOn)
				SELECT 
					@ToSyncID,
					 NEWID(),
					 AnnotationContent,
					 IsActive,
					 NULL,
					 CreatedOn,
					 @ServerTime
				FROM tblAnnotations
				WHERE SyncID = @FromSyncID

				UPDATE tblAnnotations
				SET 
					AnnotationContent.modify('replace value of (/annotation/@id)[1] with sql:column("AnnotationCode")')
				WHERE SyncID = @ToSyncID AND 
					LastModifiedOn = @ServerTime

				UPDATE tblAnnotations
				SET 
					AnnotationContent.modify('replace value of (/annotation/@dlid[.=sql:variable("@FromDlId")])[1] with sql:variable("@ToDlId")')
				WHERE SyncID = @ToSyncID AND 
					LastModifiedOn = @ServerTime

			END	
		
	END TRY  	
	BEGIN CATCH    
		DECLARE @ErrorMessage NVARCHAR(4000);    
		DECLARE @ErrorSeverity INT;    
		DECLARE @ErrorState INT;    
    
		SELECT 
			@ErrorMessage = ERROR_MESSAGE(),    
			@ErrorSeverity = ERROR_SEVERITY(),    
			@ErrorState = ERROR_STATE();    
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);    
 END CATCH  
END
GO
PRINT N'Refreshing [dbo].[uspInsertUpdateSubscription]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[uspInsertUpdateSubscription]';


GO
PRINT N'Refreshing [dbo].[uspGetDLSummary]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[uspGetDLSummary]';


GO
PRINT N'Refreshing [dbo].[uspGetUserLoanStatus]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[uspGetUserLoanStatus]';


GO
PRINT N'Refreshing [dbo].[uspGetKMDashboardData]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[uspGetKMDashboardData]';


GO
PRINT N'Update complete.';


GO
