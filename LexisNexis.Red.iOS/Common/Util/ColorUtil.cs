using System;

using UIKit;

namespace LexisNexis.Red.iOS
{
	/// <summary>
	/// Color util.
	/// 1.Used to generate UIColor instance from hex color code;
	/// 2.Calculate colour of toc node;
	/// </summary>
	public static class ColorUtil
	{
		/// <summary>
		/// Converts from hex color code, such as "#E016C5" or "0xE016C5"
		/// </summary>
		/// <returns>UIColor object generated by hex color code.</returns>
		/// <param name="hexColorCode">Hex color code."#E016C5" for example</param>
		public static UIColor ConvertFromHexColorCode (string hexColorCode)
		{
 			hexColorCode = hexColorCode.Replace ("#","0x");

			if (hexColorCode.Length == 8) {
				string redHexStr = hexColorCode.Substring (2, 2);
				string blueHexStr = hexColorCode.Substring (6, 2);
				string greenHexStr = hexColorCode.Substring (4, 2);

				UIColor color = UIColor.FromRGB (Convert.ToInt16(redHexStr, 16), Convert.ToInt16(greenHexStr, 16), Convert.ToInt16(blueHexStr, 16));
				return color;
			}

			return UIColor.Clear;
		}


		/// <summary>
		/// Generates the color of the tint.
		/// Invoked to generate color for  background of each row of table of content
		/// </summary>
		/// <returns>The tint color.</returns>
		/// <param name="level">Level.</param>
		/// <param name="totalLevel">Total level.</param>
		public static UIColor GenerateTintColor(int level, int totalLevel)
		{
			const float FirstLevelAlpha = 0.1f;
			const float MaxLevelAlpha = 1.0f;

			float ratio = FirstLevelAlpha + (MaxLevelAlpha - FirstLevelAlpha) * ((float)level) / ((float)totalLevel);
			float inverseRatio = 1.0f - ratio;

			nfloat g = (255 * inverseRatio / 255);//from 0 to 1
			nfloat b = (255 * inverseRatio / 255);//from 0 to 1

			return UIColor.FromRGB (1, g, b);
		}

	}
}

